Go Swagger
A Quick (& Incomplete) Introduction to the Client-side

Steve Mynott
steve.mynott@gmail.com
https://suffolkgophers.github.io/
@steve_mynott

: Geared towards Client-side a (partial) War Story.

* Introduction

- Why go-swagger?

- https://github.com/go-swagger/go-swagger

- Swagger 2.0 (aka OpenAPI 2.0)

- Generates both clients and servers from swagger spec

- https://goswagger.io/

: Server examples but no client examples. FAQ "minimal"

* My Use Case

- Have 4 swagger specs - vendor admin/simulator API (json), vendor auth API (yaml), internal shim API (yaml)

- Want to create RESTful clients

- mkdir simulator && ./swagger generate client --spec swagger/sim.json --target simulator

- repeat for other three

* Problem 1

.play nasty.txt
.play nasty-fix.txt

* Auto-generated Code 

.play domain_lookup_response.go /START HEADER/,/FINISH HEADER/

- models - "fairly clear"

- clients - "sort of odd"

: Two directories
: models -  structs resemble JSON unmarshalling structures - fairly obvious 
: - flat directory structure
: clients -  functions and methods to create clients - more mysterious
: embedded directory structures - client/clients

* Writing actual code and tests

- tricky due to autogenerated boiler plate being quite different

- api/api.go and api/api_test.go

* api/api.go
.play api-example.go /START OMIT/,/END OMIT/

: Much use of govim's tab complete and much confusion over v long file and method

* api/api_test.go

.play api-exampletest.go 
* Problem 2

- (vendor supplied) sim.json is wrong and doesn't describe reality

usually `{"codes":[100,200,300]}` sometimes `{"codes":["UNCAT"]}`

- (Hacky) Solution

.play domain_lookup_response.go /START OMIT/,/END OMIT/

- Better Solution (?)

* Problem 3

- JSON Request "Too Big"

- Wanted to construct a request missing json keys with empty (nullish) values

- (done for some types eg. `*string` but not all by default and not `[]string`  )

- x-omitempty in spec

-  Alters model 
`Version string `json:"version,omitempty"``

: Slack channel

* CONCLUSION

- Should I use go-swagger?

- If you are creating a large number of complex REST clients (and servers) internally probably YES

- If you are using vendor supplied swagger specs maybe NO or maybe YES

- Maybe overkill for many use cases

- Generally quite impressed
