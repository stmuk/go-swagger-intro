// START HEADER OMIT
// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

// FINISH HEADER OMIT
import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// START OMIT
// DomainLookupResponse DomainLookupResponse
//
// swagger:model DomainLookupResponse
type DomainLookupResponse struct {

	// Final categories for this domain (as used when making a decision)
	Categories []string `json:"categories"`

	// The classifications for this domain
	//Codes []float64 `json:"codes"`
	// XXX
	Codes []interface{} `json:"codes"`

	// END OMIT
	// The categories in which this domain was matched in the classification
	CodesCategories []string `json:"codes_categories"`

	// The domain that matched (longest suffix match) for the classification
	CodesMatch string `json:"codes_match,omitempty"`

	// Final match from all sources
	Match string `json:"match,omitempty"`

	// All the lists that match this domain.
	// This does not affect the match and categories output, as lists are only evaluated when making a decision
	//
	MatchingListRules []*ListRule `json:"matching_list_rules"`

	// The categories for this domain that came from Domain overrides
	OverridesCategories []string `json:"overrides_categories"`

	// The domain that matched (longest suffix match) for the override
	OverridesMatch string `json:"overrides_match,omitempty"`
}

// Validate validates this domain lookup response
func (m *DomainLookupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingListRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainLookupResponse) validateMatchingListRules(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingListRules) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingListRules); i++ {
		if swag.IsZero(m.MatchingListRules[i]) { // not required
			continue
		}

		if m.MatchingListRules[i] != nil {
			if err := m.MatchingListRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matching_list_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainLookupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainLookupResponse) UnmarshalBinary(b []byte) error {
	var res DomainLookupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
